#!/usr/bin/env python3
import argparse, os, requests
from subprocess import run

parser = argparse.ArgumentParser(description='Manage packages')
parser.add_argument("operation", type=str, help='Operation to perform')
parser.add_argument("packages", type=str, nargs='*', help='Packages to install or manage')
args = parser.parse_args()

op = args.operation
packages = [package.lower() for package in args.packages]

def repo_exists(package):
    url = f"https://github.com/untitledOS/{package}.git"
    response = requests.get(url)
    denylist = ["docs", "upkg"]
    if response.status_code == 200 and package not in denylist:
        return True

def package_installed(package):
    user = os.getlogin()
    return os.path.exists(f"/home/{user}/.local/share/untitledOS/{package}")

if op in ["list", "ls", "l"]:
    if len(os.listdir(f"/home/{os.getlogin()}/.local/share/untitledOS")) == 0:
        print("No packages installed.")
        exit(0)
    print("Installed packages:")
    user = os.getlogin()
    for package in os.listdir(f"/home/{user}/.local/share/untitledOS"):
        print(package)
    exit(0)
elif op in ["upgrade", "u", "up"]:
    if os.geteuid() != 0:
        print("uPKG must be run as root. (try sudo upkg)")
        exit(1)
    user = os.getlogin()
    for package in os.listdir(f"/home/{user}/.local/share/untitledOS"):
        print(f"Upgrading package {package}")
        run(["git", "-C", f"/home/{user}/.local/share/untitledOS/{package}", "pull"])
        run(["cp", f"/home/{user}/.local/share/untitledOS/{package}/{package}", "/usr/bin/"])
        run(["chmod", "+x", f"/usr/bin/{package}"])
        run(["cp", f"/home/{user}/.local/share/untitledOS/{package}/{package}.desktop", f"/usr/share/applications/{package}.desktop"])
        print(f"Package {package} upgraded.")
    exit(0)
elif op in ["outdated", "o", "out"]:
    user = os.getlogin()
    outdated = []
    for package in os.listdir(f"/home/{user}/.local/share/untitledOS"):
        # add as safe directory with git config --global --add safe.directory {repo_path}
        run(f"git config --global --add safe.directory /home/{user}/.local/share/untitledOS/{package}", shell=True)
        run(["pkexec", "git", "-C", f"/home/{user}/.local/share/untitledOS/{package}", "fetch"])
        response = run(["git", "-C", f"/home/{user}/.local/share/untitledOS/{package}", "status"], capture_output=True, shell=True)
        if "behind" in response.stdout.decode():
            outdated.append(package)
    if len(outdated) == 0:
        print("No outdated packages.")
        exit(0)
    print("Outdated packages:")
    for package in outdated:
        print(package)
    exit(0)
elif op in ["query", "q"]:
    if not packages:
        print("Package name is required for query operation.")
        exit(1)
    for package in packages:
        if repo_exists(package):
            print(f"Package {package} exists\n\nWeb: https://github.com/untitledOS/{package}\nGit: https://github.com/untitledOS/{package}.git")
        else:
            print(f"Package {package} does not exist.")
    exit(0)
elif op in ["install", "i", "remove", "r", "uninstall", "un"]:
    if not packages:
        print("Package name is required for install, remove, and uninstall operations.")
        exit(1)
    for package in packages:
        if op in ["install", "i"]:
            if not repo_exists(package):
                print(f"Package {package} does not exist.")
                continue
            if package_installed(package):
                print(f"Package {package} is already installed.")
                continue
            print(f"Installing package {package}")
            user = os.getlogin()
            run(["mkdir", "-p", f"/home/{user}/.local/share/untitledOS/{package}"])
            run(["git", "clone", f"https://github.com/untitledOS/{package}.git", f"/home/{user}/.local/share/untitledOS/{package}"])
            if os.geteuid() != 0:
                copy_command = run(["pkexec", "cp", f"/home/{user}/.local/share/untitledOS/{package}/{package}", "/usr/bin/"])
            else:
                copy_command = run(["cp", f"/home/{user}/.local/share/untitledOS/{package}/{package}", "/usr/bin/"])
            if copy_command.returncode == 1:
                exit(1)
            if os.geteuid() != 0:
                run(["pkexec", "chmod", "+x", f"/usr/bin/{package}"])
                run(["pkexec", "cp", f"/home/{user}/.local/share/untitledOS/{package}/{package}.desktop", f"/usr/share/applications/{package}.desktop"])
            else:
                run(["chmod", "+x", f"/usr/bin/{package}"])
                run(["cp", f"/home/{user}/.local/share/untitledOS/{package}/{package}.desktop", f"/usr/share/applications/{package}.desktop"])
            print(f"Package {package} installed.")
        elif op in ["remove", "r", "uninstall", "un"]:
            user = os.getlogin()
            if not package_installed(package):
                print(f"Package {package} is not installed.")
            else:
                if os.geteuid() != 0:
                    run(["pkexec", "rm", "-rf", f"/home/{user}/.local/share/untitledOS/{package}"])
                    run(["pkexec", "rm", f"/usr/bin/{package}"])
                else:
                    run(["rm", "-rf", f"/home/{user}/.local/share/untitledOS/{package}"])
                    run(["rm", f"/usr/bin/{package}"])
                print(f"Removed {package}.")
else:
    print(f"Operation {op} not supported.")
    exit(1)
